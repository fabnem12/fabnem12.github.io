<html>
    <head>
        <title>
            Problem Solving Activity: French Presidential Election
        </title>
        <style>
            text {
                -webkit-touch-callout: none;
                -webkit-user-select: none;
                -khtml-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
            }
            .preferrence {
                cursor: move;
            }
        </style>
        <script>
            var candidates = ["Jacques", "Jean-Marie", "Lionel", "Francois", "Arlette"];
            var colorCandidate = new Map();
            colorCandidate.set("Jacques", "0066cc");
            colorCandidate.set("Jean-Marie", "0D378A");
            colorCandidate.set("Lionel", "FF8080");
            colorCandidate.set("Francois", "ff9900");
            colorCandidate.set("Arlette", "bb0000");

            var nbVoters = 9;
            
            var nbChanges = 0;

            //compute things
            function shuffleArray(array) { //source: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array
                var ret = [...array];
                for (let i = ret.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i+1));
                    [ret[i], ret[j]] = [ret[j], ret[i]];
                }
                return ret;
            }

            function preferredCandidate(voterPreferences, availableCandidates) {
                for (var i = 0; i < voterPreferences.length; i++) {
                    if (availableCandidates.includes(voterPreferences[i]))
                        return voterPreferences[i];
                }
                return null; //shouldn't happen though
            }

            function computeResults(voters) {
                const nbVotes = new Map();
                for (const candidate of candidates) nbVotes.set(candidate, 0);

                for (var i = 0; i < voters.length; i++) { //let's compute the first preference votes
                    var preferred = preferredCandidate(voters[i], candidates);
                    nbVotes.set(preferred, nbVotes.get(preferred) + 1);
                }
                
                //let's find the top 2
                //thanks https://stackoverflow.com/questions/25500316/sort-a-dictionary-by-value-in-javascript

                var results = [...nbVotes.entries()];
                results.sort(function(first, second) {return second[1] - first[1];});
                
                var top2 = [results[0][0], results[1][0]]; //qualifiers for the runoff

                if (results[0][1] >= voters.length / 2)
                    return [results, new Map(), winner];
                
                var nbVotes2 = new Map();
                for (const candidate of top2) nbVotes2.set(candidate, 0);

                for (var i = 0; i < voters.length; i++) { //let's compute the results of the runoff
                    var preferred = preferredCandidate(voters[i], top2);
                    nbVotes2.set(preferred, nbVotes2.get(preferred) + 1);
                }

                var winner = (nbVotes2.get(top2[0]) >= nbVotes2.get(top2[1])) ? top2[0] : top2[1];

                return [results, nbVotes2, winner];
            }

            function voterLetterFromId(id, capitalize = false) {
                return String.fromCharCode(97 + id - 32*capitalize);
            }
            function voterIdFromLetter(letter, capitalize = false) {
                return letter.charCodeAt(0) - 97 + 32*capitalize;
            }

            function updateVoter(voterLetter) {
                var voterId = voterIdFromLetter(voterLetter);
                for (var i = 0; i < candidates.length; i++) {
                    voters[voterId][i] = document.getElementById(voterLetter + i).innerHTML.substr(3);
                }

                affiResults(voters);
                nbChanges += 1;
                affiNbChanges();
            }

            function getInitialSituation(numSit, voters) {
                if (numSit == null) numSit = 0;

                var initialSituations = [];
                //random
                var randomVoters = [];
                for (var i = 0; i < nbVoters; ++i) randomVoters.push(shuffleArray(candidates));
                initialSituations.push(randomVoters);

                //already set
                initialSituations.push([["Francois", "Arlette", "Lionel", "Jean-Marie", "Jacques"], ["Jean-Marie", "Jacques", "Francois", "Arlette", "Lionel"], ["Arlette", "Lionel", "Jean-Marie", "Jacques", "Francois"], ["Francois", "Jacques", "Arlette", "Lionel", "Jean-Marie"], ["Arlette", "Lionel", "Jean-Marie", "Jacques", "Francois"], ["Arlette", "Lionel", "Jean-Marie", "Francois", "Jacques"], ["Jacques", "Lionel", "Francois", "Arlette", "Jean-Marie"], ["Jean-Marie", "Lionel", "Francois", "Arlette", "Jacques"], ["Francois", "Jacques", "Arlette", "Jean-Marie", "Lionel"]]);
                initialSituations.push([["Jacques", "Francois", "Arlette", "Lionel", "Jean-Marie"], ["Jean-Marie", "Jacques", "Lionel", "Francois", "Arlette"], ["Francois", "Jean-Marie", "Arlette", "Lionel", "Jacques"], ["Arlette", "Lionel", "Jean-Marie", "Jacques", "Francois"], ["Arlette", "Francois", "Jacques", "Jean-Marie", "Lionel"], ["Arlette", "Lionel", "Francois", "Jacques", "Jean-Marie"], ["Jean-Marie", "Francois", "Jacques", "Arlette", "Lionel"], ["Lionel", "Jean-Marie", "Arlette", "Jacques", "Francois"], ["Lionel", "Jean-Marie", "Jacques", "Francois", "Arlette"]]);
                initialSituations.push([["Lionel", "Jean-Marie", "Jacques", "Francois", "Arlette"], ["Arlette", "Jean-Marie", "Jacques", "Francois", "Lionel"], ["Lionel", "Arlette", "Jacques", "Jean-Marie", "Francois"], ["Lionel", "Jacques", "Jean-Marie", "Francois", "Arlette"], ["Francois", "Lionel", "Arlette", "Jacques", "Jean-Marie"], ["Francois", "Lionel", "Jacques", "Arlette", "Jean-Marie"], ["Francois", "Arlette", "Jean-Marie", "Jacques", "Lionel"], ["Lionel", "Jean-Marie", "Arlette", "Jacques", "Francois"], ["Francois", "Lionel", "Jean-Marie", "Arlette", "Jacques"]]);

                for (var i = 0; i < initialSituations[numSit].length; ++i) {
                    voters.push([...initialSituations[numSit][i]]);
                }
            }

            //show things

            function printVoters(txt) {
                document.getElementById("voters").innerHTML += txt + "\n";
            }

            function yCandidate(i) {
                return 60+30*i;
            }
            function closestIfromY(y) {
                return Math.floor((y-60) / 30);
            }
            function affiVoter(preferences, idVoter) {
                printVoters('<rect x="' + (10 + idVoter * 100) + '" y="10" width="100" height="' + (50+30*preferences.length) + '" fill="white" stroke="black"/>');
                printVoters('<text x="' + (10+50 + idVoter * 100) + '" y="40" text-anchor="middle" fill="black" font-size="20">Voter ' + voterLetterFromId(idVoter, true) + '</text>');
                
                for (var i = 0; i < preferences.length; i++) {
                    printVoters('<rect x="' + (10 + idVoter * 100) + '" y="' + yCandidate(i) +'" width="100" height="30" fill="#' + colorCandidate.get(preferences[i]) + '" draggable="true" stroke="black" class="preferrence" id="rect_' + voterLetterFromId(idVoter) + "" + i + '" />');
                    printVoters('<text x="' + (10 + idVoter * 100 + 50) + '" y="' + (15 + yCandidate(i)) + '" fill="white" text-anchor="middle" dominant-baseline="middle" draggable="true" class="preferrence" id="' + voterLetterFromId(idVoter) + "" + i + '">' + (i+1) +'. ' + preferences[i] + '</text>');
                }

                printVoters('</g>');
            }

            function printResults(txt) {
                document.getElementById("results").innerHTML += txt + "\n";
            }

            function affiResults(voters) {
                const [results1, nbVotes2, winner] = computeResults(voters);

                //results of the 1st round
                printResults('<rect x="10" y="' + (70+30*candidates.length) + '" width="200" height="' + (30*(candidates.length+1)) +'" fill="white" stroke="black" />');
                printResults('<text x="110" y="' + (85+30*candidates.length) + '" text-anchor="middle">Results of the 1st round:</text>');
                for (var i = 0; i < results1.length; i++) {
                    printResults('<text x="15" y="' + (115+30*(candidates.length+i)) + '" fill="#' + colorCandidate.get(results1[i][0]) + '">' + (i+1) + '. ' + results1[i][0] + ' with ' + results1[i][1] + ' votes</text>');
                }

                //results of the 2nd round
                printResults('<rect x="210" y="' + (70+30*candidates.length) + '" width="200" height="' + (30*(candidates.length+1)) +'" fill="white" stroke="black" />');
                printResults('<text x="310" y="' + (85+30*candidates.length) + '" text-anchor="middle">Results of the runoff:</text>');
                var i = 0;
                for (const candidate of nbVotes2.keys()) {
                    printResults('<text x="215" y="' + (115+30*(candidates.length+i)) + '" fill="#' + colorCandidate.get(candidate) + '">' + candidate + ' with ' + nbVotes2.get(candidate) + ' votes</text>');
                    i++;
                }
            }

            function affiNbChanges() {
                document.getElementById("nb_changes").innerHTML = '<text x="420" y="' + (85+30*candidates.length) + '" font-size="20">' + nbChanges + ' changes made so far</text>';
            }

            //drag and drop - thanks https://www.petercollingridge.co.uk/tutorials/svg/interactive/dragging/
            function makeDraggable(evt) {
                var svg = evt.target;
                svg.addEventListener('mousedown', startDrag);
                svg.addEventListener('mousemove', drag);
                svg.addEventListener('mouseup', endDrag);
                svg.addEventListener('mouseleave', endDrag);

                function getMousePosition(evt) {
                    var CTM = svg.getScreenCTM();
                    return {
                        x: (evt.clientX - CTM.e) / CTM.a,
                        y: (evt.clientY - CTM.f) / CTM.d
                    };
                }

                var selectedElement = null;
                var selectedRect = null;
                var offset = null;

                function swapOrder(newY) {
                    var idBlock = selectedElement.id.charAt(1) - '0';
                    var voterLetter = selectedElement.id.charAt(0);
                    var yById = yCandidate(idBlock);

                    if (Math.abs(yById - newY) > 15) { //time to swap that block with another one
                        var otherId = voterLetter + closestIfromY(newY);
                        var other = document.getElementById(otherId);
                        var otherRect = document.getElementById("rect_" + otherId);
                        var changed = selectedElement.id != otherId;

                        selectedElement.id = otherId;
                        selectedRect.id = "rect_" + otherId;
                        //selectedRect.y = yCandidate(closestIfromY(newY));
                        //selectedElement.y = selectedRect.y + 15;
                        selectedElement.innerHTML = "" + (closestIfromY(newY)+1) + selectedElement.innerHTML.substr(1);

                        other.id = voterLetter + idBlock;
                        otherRect.id = "rect_" + voterLetter + idBlock;
                        otherRect.setAttributeNS(null, "y", yCandidate(idBlock));
                        other.setAttributeNS(null, "y", yCandidate(idBlock) + 15);
                        other.innerHTML = "" + (idBlock+1) + other.innerHTML.substr(1);
                    
                        if (changed) updateVoter(voterLetter);
                        return true;
                    }
                    return false;
                }

                function startDrag(evt) {
                    if (evt.target.classList.contains('preferrence')) {
                        selectedElement = evt.target;
                        var idE = selectedElement.id;
                        selectedRect = document.getElementById("rect_" + idE);

                        if (idE.startsWith("rect_")) {
                            selectedRect = selectedElement;
                            selectedElement = document.getElementById(idE.substr(5));
                        }

                        offset = getMousePosition(evt);
                        offset.x -= parseFloat(selectedElement.getAttributeNS(null, "x"));
                        offset.y -= parseFloat(selectedElement.getAttributeNS(null, "y"));
                    } else if (evt.target.id == "reset_bt" || evt.target.id == "reset_txt") {
                        reset();
                    }
                }
                function drag(evt) {
                    if (selectedElement) {
                        evt.preventDefault();
                        var coord = getMousePosition(evt);
                        var newY = coord.y - offset.y;
                        if (newY < 70) newY = 75;
                        else if (newY > 45 + 30 * candidates.length) newY = 45 + 30 * candidates.length;

                        if (swapOrder(newY)) return;
                        {
                            selectedElement.setAttributeNS(null, "y", newY);
                            selectedRect.setAttributeNS(null, "y", newY - 15); //for the rectangle
                        }
                    }
                }
                function endDrag(evt) {
                    if (selectedElement != null) {
                        var idBlock = selectedElement.id.charAt(1) - '0';
                        var yById = yCandidate(idBlock);
                        selectedRect.setAttributeNS(null, "y", yById);
                        selectedElement.setAttributeNS(null, "y", yById + 15);
                    }
                    selectedElement = null; selectedRect = null;
                }
            }

            //CORE CODE

            var voters = []; //let's store their order of preference
            //for (var i = 0; i < nbVoters; i++) {
            //    voters.push(shuffleArray(candidates));
            //}

            const urlParams = new URLSearchParams(window.location.search);
            //printVoters("<text x='0' y='0' fill='black'>" + window.location.search + '</text>');
            

            getInitialSituation(3, voters);
            var votersInit = [];
            for (var i = 0; i < nbVoters; i++) votersInit.push([...voters[i]]);

            function init() {
                document.getElementById("voters").innerHTML = "";
                document.getElementById("results").innerHTML = "";

                for (var i = 0; i < nbVoters; i++)
                    affiVoter(voters[i], i);
                
                affiResults(voters);
                affiNbChanges();
            }

            function reset() {
                voters = [...votersInit];
                for (var i = 0; i < nbVoters; i++) {
                    voters[i] = [];
                    for (var j = 0; j < votersInit[i].length; j++)
                        voters[i].push(votersInit[i][j]);
                }
                nbChanges = 0;
                init();
            }
        </script>
    </head>
    <body>
        <svg width="100%" height="100%" id="svg" onload="makeDraggable(evt)">
            <g id="voters">
            </g>

            <g id="results">

            </g>

            <g id="nb_changes">

            </g>
            <rect x="420" y="255" width="80" height="50" fill="red" id="reset_bt" />
            <text x="460" y="285" font-size="20" text-anchor="middle" fill="white" id="reset_txt">RESET</text>
        </svg>
        <script>
            init();
        </script>
    </body>
</html>