<html>
    <head>
        <title>
            Problem Solving Activity: US Presidential Election
        </title>
        <style>
            text {
                -webkit-touch-callout: none;
                -webkit-user-select: none;
                -khtml-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
            }
            .rangeSlider {
                cursor: move;
            }
        </style>
        <script>
            var candidates = ["Party A", "Party B"];
            var nbVoters = 9;

            //compute things
            function computeResults(states, nbElectors) {
                const nbElectorsPerParty = [0, 0];
                const nbVotesPerParty = [0, 0];

                for (var i = 0; i < states.length; ++i) {
                    const sharePartyA = states[i];
                    const nbElectorsState = nbElectors[i];

                    nbVotesPerParty[0] += Math.round(sharePartyA * nbElectorsState * 100);
                    nbVotesPerParty[1] += Math.round((1-sharePartyA) * nbElectorsState * 100);

                    nbElectorsPerParty[0 + (sharePartyA < 0.5)] += nbElectorsState;
                }

                return [nbElectorsPerParty, nbVotesPerParty];
            }

            function voterLetterFromId(id, capitalize = false) {
                return String.fromCharCode(97 + id - 32*capitalize);
            }
            function voterIdFromLetter(letter, capitalize = false) {
                return letter.charCodeAt(0) - 97 + 32*capitalize;
            }

            function ecartPrevNouv(states, statesInit, nbElectors) {
                var sum = 0;
                for (var i = 0; i < nbVoters; i++) {
                    sum += Math.round(Math.abs((states[i] - statesInit[i]) * nbElectors[i] * 100));
                }
                return sum;
            }

            //show things

            function printVoters(txt) {
                document.getElementById("states").innerHTML += txt + "\n";
            }

            function xOfState(idState) {
                return 10 + idState * 100;
            }
            function positionSlider(idState, sharePartyA) {
                return xOfState(idState) + 5 + 85 * sharePartyA;
            }
            function updateShareFromSlider(idState, x, states) {
                states[idState] = (x - xOfState(idState) - 5) / 85;
                const e = document.getElementById("pie_" + idState);
                e.setAttributeNS(null, "stroke-dasharray", 'calc(calc(' + states[idState] +' * 3.14159265358979 * 40)) calc(3.14159265358979 * 40)'); //soixante
                const f = document.getElementById("rect_" + idState);
                f.setAttributeNS(null, "fill", (states[idState] > 0.5) ? "blue" : "red");
            }

            function affiVoter(sharePartyA, nbElectorsState, idState) {
                var center = 50 + xOfState(idState)
                printVoters('<rect x="' + xOfState(idState) + '" y="10" width="100" height="200" fill="' + ((sharePartyA > 0.5) ? "blue" : "red") + '" stroke="black" id="rect_' + idState + '" />');
                printVoters('<text x="' + center + '" y="35" text-anchor="middle" fill="white" font-size="20">État ' + voterLetterFromId(idState, true) + '</text>');
                printVoters('<text x="' + center + '" y="55" text-anchor="middle" fill="white" font-size="20">' + nbElectorsState + ' electors</text>');
                
                var slider = '<g class="slidecontainer">\n';
                slider += '\t<rect x="' + (5 + xOfState(idState)) + '" y="80" width="85" height="5" fill="#c0c0c0" stroke="#c0c0c0" />\n';
                slider += '\t<rect x="' + (positionSlider(idState, sharePartyA)-2) + '" y="70.5" width="4" height="24" fill="black" />\n'; //initial position of the slider
                slider += '\t<circle cx="' + positionSlider(idState, sharePartyA) + '" cy ="82.5" r="7" fill="white" draggable="true" class="rangeSlider" id="slide_' + voterLetterFromId(idState) + '" />\n';
                slider += '</g>';
                printVoters(slider);

                printVoters('<div>'); //pie chart
                printVoters('\t<circle cx="' + center + '" cy="145" r="40" fill="red" stroke="black" stroke-width="2" />');
                printVoters('\t<circle cx="' + center + '" cy="145" r="20" fill="transparent" stroke="blue" stroke-width="40" stroke-dasharray="calc(calc(' + sharePartyA +' * 3.14159265358979 * 40)) calc(3.14159265358979 * 40)" id="pie_' + idState + '" />');
                printVoters('</div>');

                printVoters('</g>');
            }

            function printResults(txt) {
                document.getElementById("results").innerHTML += txt + "\n";
            }

            function affiResults(states, nbElectors) {
                const [electoralVote, popularVote] = computeResults(states, nbElectors);

                //results of the electoral college
                printResults('<rect x="10" y="210" width="300" height="96" fill="white" stroke="black" />');
                printResults('<text x="170" y="225" text-anchor="middle">Résultat des electors :</text>');
                printResults('<text x="15" y="250" fill="blue">' + electoralVote[0] + ' electors pour le parti A</text>');
                printResults('<text x="15" y="280" fill="red">' + electoralVote[1] + ' electors pour le parti B</text>');

                //results of the popular vote
                printResults('<rect x="310" y="210" width="300" height="96" fill="white" stroke="black" />');
                printResults('<text x="460" y="225" text-anchor="middle">Résultat du vote populaire :</text>');
                printResults('<text x="315" y="250" fill="blue">' + popularVote[0] + ' voix pour le parti A</text>');
                printResults('<text x="315" y="280" fill="red">' + popularVote[1] + ' voix pour le parti B</text>');

                affiNbChanges();
            }

            function affiNbChanges() {
                document.getElementById("nb_changes").innerHTML = '<text x="620" y="235" font-size="20">Tu as changé le vote de ' + ecartPrevNouv(states, statesInit, nbElectors) + ' votants</text>';
            }

            //drag and drop - thanks https://www.petercollingridge.co.uk/tutorials/svg/interactive/dragging/
            function makeDraggable(evt, states, nbElectors) {
                var svg = evt.target;
                svg.addEventListener('mousedown', startDrag);
                svg.addEventListener('mousemove', drag);
                svg.addEventListener('mouseup', endDrag);
                svg.addEventListener('mouseleave', endDrag);

                function getMousePosition(evt) {
                    var CTM = svg.getScreenCTM();
                    return {
                        x: (evt.clientX - CTM.e) / CTM.a
                    };
                }

                var selectedElement = null;
                var offset = null;

                function startDrag(evt) {
                    if (evt.target.classList.contains('rangeSlider')) {
                        selectedElement = evt.target;
                        var idE = selectedElement.id;

                        offset = getMousePosition(evt);
                        offset.x -= parseFloat(selectedElement.getAttributeNS(null, "cx"));
                    } else if (evt.target.id == "reset_bt" || evt.target.id == "reset_txt") {
                        reset();
                    }
                }
                function moveSlider(newX) {
                    const letterState = selectedElement.id.charAt(6);
                        const idState = voterIdFromLetter(letterState);

                        const minX = positionSlider(idState, 0);
                        const maxX = minX + 85;
                        if (newX < minX) newX = minX;
                        else if (newX > maxX) newX = maxX;
                        
                        selectedElement.setAttributeNS(null, "cx", newX);
                        updateShareFromSlider(idState, newX, states);
                        affiResults(states, nbElectors);
                }
                function drag(evt) {
                    if (selectedElement) {
                        evt.preventDefault();
                        var coord = getMousePosition(evt);
                        var newX = coord.x - offset.x;
                        moveSlider(newX);
                    }
                }
                function endDrag(evt) {
                    selectedElement = null;
                }
            }

            //CORE CODE

            var states = []; //let's store the percentage for Party A in each state
            var nbElectors = []; //number of electors in each state
            var random = false;
            
            if (random) {
                for (var i = 0; i < nbVoters; i++) {
                    states.push(0.2 + Math.random() * 0.6);
                    nbElectors.push(3 + Math.round(Math.random() * 10));
                }
            } else {
                states = [0.33, 0.33, 0.45, 0.75, 0.42, 0.495, 0.495, 0.755, 0.72];
                nbElectors = [13, 12, 6, 10, 8, 6, 5, 7, 7];
            }

            const statesInit = [...states];

            function init() {
                document.getElementById("states").innerHTML = "";
                document.getElementById("results").innerHTML = "";

                for (var i = 0; i < nbVoters; i++)
                    affiVoter(states[i], nbElectors[i], i);
                
                affiResults(states, nbElectors);
                affiNbChanges();
            }

            function reset() {
                for (var i = 0; i < nbVoters; i++) states[i] = statesInit[i];
                init();
            }
        </script>
    </head>
    <body>
        <svg width="100%" height="100%" id="svg" onload="makeDraggable(evt, states, nbElectors)">
            <g id="states">
            </g>

            <g id="results">

            </g>
            <g id="nb_changes">

            </g>
            <rect x="620" y="255" width="80" height="50" fill="red" id="reset_bt" />
            <text x="660" y="285" font-size="20" text-anchor="middle" fill="white" id="reset_txt">RESET</text>
        </svg>
        <script>
            init();
        </script>
    </body>
</html>